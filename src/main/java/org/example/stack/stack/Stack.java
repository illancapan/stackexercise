package org.example.stack.stack;public class Stack {    private int[] stack;    private int top;    private final int MAX_SIZE;    public Stack(int size) {        this.MAX_SIZE = size;        this.stack = new int[MAX_SIZE];        this.top = -1;    }    public Stack() {        this.MAX_SIZE = 10;        this.stack = new int[MAX_SIZE];        this.top = -1;    }    public boolean push(int value) {        if (top == MAX_SIZE - 1) {            System.out.println("Overflow: Stack is full.");            return false;        }        if (constains(value)) {            System.out.println("The value is already in the stack");            return false;        }        stack[++top] = value;        return true;    }    public int peek() {        if (top == -1) {            throw new IllegalStateException("Underflow");        }        return stack[top];    }    public boolean isEmpty() {        return top == -1;    }    public int size() {        return top + 1;    }    public int pop() {        if (top == -1) {            throw new IllegalStateException("Underflow!!");        }        return stack[top--];    }    public boolean constains(int value){        for (int i = 0; i <= top; i++){            if (stack[i]== value){                return true;            }        }        return false;    }}//IMPLEMENTAR DEFAULT CAPACITY, QUE ME DEVUELVAN TRUE O FALSE SI YA ESTA ONGRESADO, VALIDAR DUPLICADOS