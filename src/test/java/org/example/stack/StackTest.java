package org.example.stack;import org.example.stack.stack.Stack;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertThrows;import static org.junit.jupiter.api.Assertions.assertTrue;class StackTest {    private Stack stack;    @BeforeEach    void initialize() {        stack = new Stack(10); // tamaño de la pila    }    // Crear stack y verificar que esté vacío    @Test    void createStack() {        assertTrue(stack.isEmpty());        assertEquals(0, stack.size()); // Verificar tamaño inicial    }    // Hacer push y verificar el valor    @Test    void makePushInStack() {        stack.push(3);        assertEquals(3, stack.peek(), "prueba push stack");        assertEquals(1, stack.size());    }    // Obtener el tamaño de una pila nueva    @Test    void obtainSizeStackNew() {        Stack newStack = new Stack(5);        assertEquals(0, newStack.size(), "stack nuevo");    }    // Hacer push y verificar el tamaño    @Test    void makePushAndSize() {        stack.push(5);        assertEquals(1, stack.size(), "la pila debe ser 1");        stack.push(10);        assertEquals(2, stack.size(), "la pila debe ser 2");    }    // Hacer push dos veces y verificar el tamaño    @Test    void pushTwiceAndCheckSize() {        stack.push(5);        stack.push(10);        assertEquals(2, stack.size(), "la pila debe tener 2 después de 2 push");    }    // Hacer pop y verificar el valor    @Test    void popStack() {        stack.push(1);        stack.push(2);        int popped = stack.pop();        assertEquals(2, popped);        assertEquals(1, stack.size());    }    // Hacer push, luego pop, y verificar tamaño y valor    @Test    void makePushAndPop() {        stack.push(5);        assertEquals(1, stack.size(), "debe ser 1 el tamaño");        assertEquals(5, stack.pop(), "debe devolver 5, el último valor insertado");    }    // Hacer peek y verificar el valor en la cima    @Test    void makePeek() {        stack.push(7);        assertEquals(7, stack.peek(), "la cima debe ser 7");    }    // Push, peek, y verificar tamaño    @Test    void makePushPeekSize() {        stack.push(10);        assertEquals(10, stack.peek(), "la cima debe ser 10");        assertEquals(1, stack.size(), "el tamaño debe ser 1");    }    // Hacer push, push, pop, pop y verificar tamaño    @Test    void pushTwoThenPopTwoAndCheckSize() {        stack.push(1);        stack.push(2);        assertEquals(2, stack.pop());        assertEquals(1, stack.pop());        assertEquals(0, stack.size());    }    // Hacer push, pop, push, pop y verificar tamaño    @Test    void makePushPopPushPop() {        stack.push(5);        assertEquals(5, stack.pop());        stack.push(10);        assertEquals(10, stack.pop());        assertEquals(0, stack.size());    }    // Verificar el tamaño máximo de la pila    @Test    void makeMaxSize() {        stack.push(1);        stack.push(2);        stack.push(3);        stack.push(4);        stack.push(5);        assertEquals(5, stack.size());        // Lanza una excepción de desbordamiento        assertThrows(StackOverflowError.class, () -> {            stack.push(6);        });    }    // Hacer push más allá del tamaño máximo    @Test    void pushExceedsMaxSize() {        stack.push(1);        stack.push(2);        stack.push(3);        stack.push(4);        stack.push(5);        assertEquals(5, stack.size());        // Se espera un desbordamiento de pila        assertThrows(StackOverflowError.class, () -> {            stack.push(6);        });        assertEquals(5, stack.size());    }}